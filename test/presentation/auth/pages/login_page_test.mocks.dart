// Mocks generated by Mockito 5.0.15 from annotations
// in flutter_tdd_starter/test/presentation/auth/pages/login_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i7;
import 'package:dartz/dartz.dart' as _i6;
import 'package:flutter_tdd_starter/core/error/failures.dart' as _i8;
import 'package:flutter_tdd_starter/core/storage/shared_prefs.dart' as _i2;
import 'package:flutter_tdd_starter/domain/auth/entities/entities.dart' as _i9;
import 'package:flutter_tdd_starter/domain/auth/usecases/usecase.dart' as _i3;
import 'package:flutter_tdd_starter/presentation/auth/bloc/auth_bloc.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeSharedPrefs_0 extends _i1.Fake implements _i2.SharedPrefs {}

class _FakeLoginUsecase_1 extends _i1.Fake implements _i3.LoginUsecase {}

class _FakeAuthState_2 extends _i1.Fake implements _i4.AuthState {}

class _FakeStreamSubscription_3<T> extends _i1.Fake
    implements _i5.StreamSubscription<T> {}

class _FakeEither_4<L, R> extends _i1.Fake implements _i6.Either<L, R> {}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i4.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SharedPrefs get prefs => (super.noSuchMethod(Invocation.getter(#prefs),
      returnValue: _FakeSharedPrefs_0()) as _i2.SharedPrefs);
  @override
  _i3.LoginUsecase get loginUsecase =>
      (super.noSuchMethod(Invocation.getter(#loginUsecase),
          returnValue: _FakeLoginUsecase_1()) as _i3.LoginUsecase);
  @override
  _i4.AuthState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeAuthState_2()) as _i4.AuthState);
  @override
  _i5.Stream<_i4.AuthState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i4.AuthState>.empty()) as _i5.Stream<_i4.AuthState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i5.Stream<_i4.AuthState> mapEventToState(_i4.AuthEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i4.AuthState>.empty())
          as _i5.Stream<_i4.AuthState>);
  @override
  void add(_i4.AuthEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i4.AuthEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<_i7.Transition<_i4.AuthEvent, _i4.AuthState>> transformEvents(
          _i5.Stream<_i4.AuthEvent>? events,
          _i7.TransitionFunction<_i4.AuthEvent, _i4.AuthState>? transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i7.Transition<_i4.AuthEvent, _i4.AuthState>>.empty())
          as _i5.Stream<_i7.Transition<_i4.AuthEvent, _i4.AuthState>>);
  @override
  void emit(_i4.AuthState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onTransition(_i7.Transition<_i4.AuthEvent, _i4.AuthState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<_i7.Transition<_i4.AuthEvent, _i4.AuthState>> transformTransitions(
          _i5.Stream<_i7.Transition<_i4.AuthEvent, _i4.AuthState>>?
              transitions) =>
      (super.noSuchMethod(
              Invocation.method(#transformTransitions, [transitions]),
              returnValue:
                  Stream<_i7.Transition<_i4.AuthEvent, _i4.AuthState>>.empty())
          as _i5.Stream<_i7.Transition<_i4.AuthEvent, _i4.AuthState>>);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.StreamSubscription<_i4.AuthState> listen(
          void Function(_i4.AuthState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_3<_i4.AuthState>())
          as _i5.StreamSubscription<_i4.AuthState>);
  @override
  void onChange(_i7.Change<_i4.AuthState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LoginUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUsecase extends _i1.Mock implements _i3.LoginUsecase {
  MockLoginUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i6.Either<_i8.Failure, _i9.LoginEntity>> call(
          _i9.LoginBody? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
          returnValue: Future<_i6.Either<_i8.Failure, _i9.LoginEntity>>.value(
              _FakeEither_4<_i8.Failure, _i9.LoginEntity>())) as _i5
          .Future<_i6.Either<_i8.Failure, _i9.LoginEntity>>);
  @override
  _i5.Future<_i6.Either<_i8.Failure, _i9.LoginEntity>> execute(
          _i9.LoginBody? params) =>
      (super.noSuchMethod(Invocation.method(#execute, [params]),
          returnValue: Future<_i6.Either<_i8.Failure, _i9.LoginEntity>>.value(
              _FakeEither_4<_i8.Failure, _i9.LoginEntity>())) as _i5
          .Future<_i6.Either<_i8.Failure, _i9.LoginEntity>>);
  @override
  String toString() => super.toString();
}
